<?php

/*
 * This file is part of the Api Platform Laravel project.
 *
 * (c) Anthonius Munthi <https://itstoni.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Tests\ApiPlatformLaravel\Functional;

use ApiPlatformLaravel\Testing\InteractsWithORM;
use Illuminate\Support\Facades\Hash;
use Tests\Dummy\Model\Group;
use Tests\Dummy\Model\User;

class DoctrineIntegrationTest extends TestCase
{
    use InteractsWithORM;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->refreshDatabase();
    }

    public function testBoot()
    {
        /* @var \Symfony\Component\DependencyInjection\ContainerInterface $container */


        $this->assertNotNull($this->getRegistry()->getManagerForClass(User::class));
    }

    public function testResolvedTargetEntities()
    {
        $group = $this->createGroup();
        $user = $this->createUser();
        $user->setGroup($group);
        $this->store($user);

        $this->assertNotNull($user->getId());
        $this->assertEquals($group->getId(), $user->getGroup()->getId());
    }

    /**
     * @param string $username
     * @param string $email
     * @param string $fullname
     * @param string $password
     * @return User
     */
    protected function createUser($username = 'test', $email = 'test@example.com', $fullname = 'Test User', $password='test')
    {
        $user = new User();
        $user
            ->setUsername($username)
            ->setEmail($email)
            ->setFullname($fullname)
            ->setPassword(Hash::make($password))
        ;
        $this->store($user);
        return $user;
    }

    /**
     * @param string $name
     * @return Group
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    protected function createGroup($name = 'test')
    {
        $group = new Group();
        $group->setName('test');
        $this->store($group);
        return $group;
    }
}
